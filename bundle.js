(function (React$1, reactDom, d3) {
        'use strict';

        React$1 = React$1 && Object.prototype.hasOwnProperty.call(React$1, 'default') ? React$1['default'] : React$1;
        reactDom = reactDom && Object.prototype.hasOwnProperty.call(reactDom, 'default') ? reactDom['default'] : reactDom;

        const BackgroundCircle = ({radius, strokeWidth}) => (      React.createElement( 'circle', { 
                r: radius, fill: 'yellow', stroke: 'black', 'stroke-width': strokeWidth }));

        const Eyes = ({eyeRadius, eyeOffsetX, eyeOffsetY}) => (React.createElement( 'g', null, " ", React.createElement( 'circle', { r: eyeRadius, cx: -eyeOffsetX, cy: -eyeOffsetY }),  
         React.createElement( 'circle', { r: eyeRadius, cx: +eyeOffsetX, cy: -eyeOffsetY }), " " )
        );

        console.log(d3.arc);

        const Mouth = ({mouthRadius,mouthWidth}) => {
                  var mouthArc = d3.arc() 
                    .innerRadius(mouthRadius) 
                    .outerRadius(mouthRadius + mouthWidth) 
                    .startAngle(Math.PI/2) 
                    .endAngle(Math.PI*3/2);
          return React.createElement( 'path', { d: mouthArc() })};

        const Brows = ({browRadius,eyeOffsetX,browOffsetY}) => 
        {let browArc = d3.arc() 
                    .innerRadius(browRadius) 
                    .outerRadius(browRadius + 4) 
                    .startAngle(-Math.PI/2.5) 
                    .endAngle(Math.PI/2.5);
          
          return React.createElement( 'g', null,
            React.createElement( 'g', { transform: `translate(${+eyeOffsetX},${-browOffsetY})` },
                	React.createElement( 'path', { d: browArc() })
                ),
               	React.createElement( 'g', { transform: `translate(${-eyeOffsetX},${-browOffsetY})` },
             	 		React.createElement( 'path', { d: browArc() })
             	 	)
              )};

        const FaceContainer = ({children, width, height, centerX , centerY}) => (
          React.createElement( 'svg', { width: width, height: height },
            React.createElement( 'g', { transform: `translate(${centerX},${centerY})` },
              children
              )
            )
        );

        const Face = ({
          						width,
          						height,
          						centerX,
                      centerY,
        							strokeWidth,
                      eyeOffsetX,
                      eyeOffsetY,
                      eyeRadius,
                      mouthRadius,
                      mouthWidth,
                      browRadius,
          						browOffsetY,
        } ) => (
          React.createElement( FaceContainer, { width: width, height: height, centerX: centerX, centerY: centerY },
              React.createElement( BackgroundCircle, { 
                radius: centerY - strokeWidth/2, strokeWidth: strokeWidth }),
              React.createElement( Eyes, { 
                eyeRadius: eyeRadius, eyeOffsetX: eyeOffsetX, eyeOffsetY: eyeOffsetY }),
              React.createElement( Mouth, { 
                mouthRadius: mouthRadius, mouthWidth: mouthWidth }),  
             	React.createElement( Brows, { 
                browRadius: browRadius, eyeOffsetX: eyeOffsetX, browOffsetY: browOffsetY })
            )
        );

        const width = 160;
        const height = 160;
        ///let eyeRadius = 5 + Math.random()*5;

        const array = d3.range(6*3);

        const App = () => array.map(() => (
          React$1.createElement( Face, { 			width: width, height: height, centerX: width / 2, centerY: height / 2, strokeWidth: Math.random()*10, eyeOffsetX: width/10 + Math.random()*10, eyeOffsetY: height/(Math.random()*3+6), eyeRadius: 5 + Math.random()*10, mouthRadius: width/10 + Math.random()*50, mouthWidth: Math.random()*10+1, browOffsetY: height/(Math.random()*3+4), browRadius: 5 + Math.random()*10 * 1.9 })
        ));

        const rootElement = document.getElementById("root");
        ReactDOM.render(
            React$1.createElement( App, null ),
          rootElement
        );

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,